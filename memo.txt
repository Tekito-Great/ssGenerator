

MARKDOWN -> BLOCK[] (markdown_block.py)
    def markdown_to_blocks(markdown):

    BLOCKのタイプを判定
        def block_to_block_type(markdown):

BLOCK[] -> HTML Node 
HTML_Nodeは、Parent_NodeとChildNodeを作る必要。

HTML Nodeになれば、to_htmlでHTMLをはきだせる。 

Text -> Text Node[] (markdown.py)       in-line
    def text_to_textnodes(text)

Text Node -> HTML Node (main.py) (Leaf Node)    in-line
    def text_node_to_html_node(text_node):



TextNodeはタイプの情報持っている。
HTMLNode, LeafNode, ParentNodeは、tagに情報持っているけど、後は全部平文


class TextNode:
    def __init__(self, text, text_type, url = None):
        if not isinstance(text_type, TextType):
            raise ValueError("text_type must be an instance of TextType Enum")
        
        self.text = text
        self.text_type = text_type
        self.url = url

class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children 
        self.props = props 

class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children= children, props=props)

    def to_html(self):

        if self.tag is None:
            raise ValueError("ParentNode must have a tag")
        if self.children is None:
            raise ValueError("ParentNode must have children")
        children_html = "".join(child.to_html() for child in self.children)
        props_html = self.props_to_html() if self.props else ""
        props_str = f"{props_html}" if props_html else ""  

        return f"<{self.tag}{props_str}>{children_html}</{self.tag}>"